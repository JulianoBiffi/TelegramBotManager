CREATE SCHEMA IF NOT EXISTS financialcontrol;

GRANT USAGE ON SCHEMA financialcontrol TO anon, authenticated, service_role;

GRANT ALL ON ALL TABLES IN SCHEMA financialcontrol TO anon, authenticated, service_role;

GRANT ALL ON ALL ROUTINES IN SCHEMA financialcontrol TO anon, authenticated, service_role;

GRANT ALL ON ALL SEQUENCES IN SCHEMA financialcontrol TO anon, authenticated, service_role;

-- Permissões padrão para futuras tabelas
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA financialcontrol 
GRANT ALL ON TABLES TO anon, authenticated, service_role;

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA financialcontrol 
GRANT ALL ON ROUTINES TO anon, authenticated, service_role;

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA financialcontrol 
GRANT ALL ON SEQUENCES TO anon, authenticated, service_role;



CREATE TABLE financialcontrol.category (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    description TEXT NOT NULL
);

CREATE TABLE financialcontrol.transaction (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    date TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    credit_card TEXT NOT NULL,
    value NUMERIC NOT NULL,
    description TEXT NOT NULL,
    category_id BIGINT NULL REFERENCES financialcontrol.category(id)
);


ALTER TABLE financialcontrol.category DISABLE ROW LEVEL SECURITY;
ALTER TABLE financialcontrol.transaction DISABLE ROW LEVEL SECURITY;

CREATE OR REPLACE FUNCTION financialcontrol.getcategorybytransactiondescription(
  transactiondescription text
)
RETURNS TABLE (id bigint, description text)
LANGUAGE plpgsql
AS $$
BEGIN
  RETURN QUERY
  SELECT c.id, c.description
  FROM financialcontrol.category c
  INNER JOIN financialcontrol.transaction t ON t.category_id = c.id
  WHERE LOWER(t.description) LIKE '%' || LOWER(transactiondescription) || '%'
  LIMIT 1;
END;
$$;

